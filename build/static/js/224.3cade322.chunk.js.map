{"version":3,"file":"static/js/224.3cade322.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/infoBanner/InfoBanner.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ \n                display: 'block', \n                width: \"250px\", \n                height: \"250px\", \n                objectFit: 'contain', \n                margin: \"0 auto\"}} \n            src={img} \n            alt='Error'/>\n    )\n}\n\nexport default ErrorMessage;","import React from 'react';\nimport { Formik, Form} from 'formik';\nimport Spinner from '../spinner/Spinner';\nimport './popup.scss';\n\nconst InfoBanner = () => {\n    \n    // <Popup trigger={<button className=\"button\"> Info </button>} modal>\n    //     <span> Note that this is a test project and uses a third-party API (Marvel). Therefore, the speed of loading characters and comics depends only on the server, which unfortunately responds very slowly (~30 sec).\n    //     Thank you for being patient! </span>\n    // </Popup>\n    return (\n        // <div>Note that this is a test project and uses a third-party API (Marvel). Therefore, the speed of loading characters and comics depends only on the server, which unfortunately responds very slowly (~30 sec).\n        // Thank you for being patient!</div>\n        <div className='modal'>\n        <Formik>\n            <Form>\n                <label className='label' htmlFor=\"charName\">Note that this is a test project and uses a third-party API (Marvel). Therefore, the speed of loading characters and comics depends only on the server, which unfortunately responds very slowly (~30 sec).\n                Thank you for being patient!\n                </label>\n                <Spinner/>\n            </Form>\n        </Formik>\n    </div>\n    )\n}\n\nexport default InfoBanner;","import { useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n        <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n        <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n                {description}\n            </p>\n            <div className=\"randomchar__btns\">\n                <a href={homepage} className=\"button button__main\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport InfoBanner from '../infoBanner/InfoBanner';\n\nimport './charList.scss';\n\nconst setContent = (process, items, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? items : <InfoBanner/>;\n        case 'confirmed':\n            return items;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n    \n    // Default way\n\n    // const onCharListLoaded = async (newCharList) => {\n    //     let ended = false;\n    //     if (newCharList.length < 9) {\n    //         ended = true;\n    //     }\n    //     setCharList([...charList, ...newCharList]);\n    //     setNewItemLoading(false);\n    //     setOffset(offset + 9);\n    //     setCharEnded(ended)\n    // }\n\n    // Recursion way\n\n    // const onCharListLoaded = (newCharList) => {\n    //     let ended = false;\n    //     if (newCharList.length < 9) {\n    //         ended = true;\n    //     }\n \n    //     const addChar = (index) => {\n    //         if (index < newCharList.length) {\n    //             setCharList(charList => [...charList, newCharList[index]]);\n    //             setTimeout(() => addChar(index + 1), 1000);\n    //         } else {\n    //             setNewItemLoading(false);\n    //             setOffset(offset => offset + newCharList.length);\n    //             setCharEnded(ended);\n    //         }\n    //     };\n    \n    //     addChar(0);\n    // }\n\n    // Delay way\n\n    const onCharListLoaded = async (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n \n        const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n \n        for (let char of newCharList) {\n            await delay(500);\n            setCharList(charList => [...charList, char]);\n        }\n \n        setNewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail.includes('image_not_available')) { imgStyle = {'objectFit' : 'unset'}}\n\n            return (\n                <CSSTransition in={true} key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyUp={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i)\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup appear={true} component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, renderItems(charList), newItemLoading)\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = process === 'error' ? <div className='char__search-critical-error'><ErrorMessage/></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className='char__search-wrapper'>\n                        <div className='char__search-success'>There is! Visit {char[0].name} page?</div>\n                        <Link to={`/character/${char[0].id}`} className='button button-secondary'>\n                            <div className='inner'>To page</div>\n                        </Link>\n                    </div> :\n                    <div className='char__search-error'>\n                        The character was not found. Check the name and try again\n                    </div>\n    return (\n        <div className='char__search-form'>\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required!'),\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className='char__search-label' htmlFor=\"charName\">Or find a character by name</label>\n                    <div className='char__search-wrapper'>\n                        <Field\n                            id=\"charName\"\n                            name=\"charName\"\n                            type=\"text\"\n                            placeholder=\"Enter name\"\n                        />\n                        <button \n                            type=\"submit\"\n                            className='button button__main'\n                            disabled={process === 'loading'}>\n                            <div className='inner'>Find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component='div' className='char__search-error' name='charName'/>\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    // Select getDerivedStateFromError OR componentDidCatch\n\n    // static getDerivedStateFromError(error) {\n    //     return {error: true};\n    // }\n\n    componentDidCatch(error, info) {\n        console.log(error, info)\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                    />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div> \n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        \n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp(); \n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=bef7e7189c9364cb60378baf085f4e57';\n    const _baseOffset = 210;\n    const _baseLimit = 8;\n\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=${_baseLimit + 1}&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async(offset = 0, limit = _baseLimit) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${_baseLimit}&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n        }\n    }\n\n\n    return {clearError, \n            process,\n            setProcess, \n            getAllCharacters, \n            getCharacter, \n            getAllComics, \n            getComic, \n            getCharacterByName}\n}\n\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","InfoBanner","className","children","Formik","_jsxs","Form","htmlFor","Spinner","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","delay","ms","Promise","resolve","setTimeout","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","items","Error","arr","map","i","includes","CSSTransition","in","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyUp","e","key","TransitionGroup","appear","component","renderItems","disabled","comics","_Fragment","charId","CharSearchForm","getCharacterByName","errorMessage","results","Link","to","concat","initialValues","charName","validationSchema","Yup","required","onSubmit","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","Component","constructor","arguments","state","error","componentDidCatch","info","console","log","this","setState","render","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","_baseLimit","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}