{"version":3,"file":"static/js/156.abdf4fa2.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ \n                display: 'block', \n                width: \"250px\", \n                height: \"250px\", \n                objectFit: 'contain', \n                margin: \"0 auto\"}} \n            src={img} \n            alt='Error'/>\n    )\n}\n\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst SinglePage = ({Component, dataType}) => {\n    const {id} = useParams();\n    const [data, setData] = useState(null);\n    const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateData()\n        // eslint-disable-next-line\n    }, [id])\n\n    const updateData = () => {\n        clearError();\n\n        switch (dataType) {\n            case 'comic':\n                getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));;\n                break;\n            case 'character':\n                getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));;\n                break;\n            default:\n                throw new Error('Unexpected page request');\n        }\n    }\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    }\n\n    return (\n        <>\n            <AppBanner/>\n            {setContent(process, Component, data)}\n        </>\n    )\n}\n\nexport default SinglePage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        \n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp(); \n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=bef7e7189c9364cb60378baf085f4e57';\n    const _baseOffset = 210;\n    const _baseLimit = 8;\n\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=${_baseLimit + 1}&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?nameStartsWith=${name}&limit=${_baseLimit + 1}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async(offset = 0, limit = _baseLimit) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${_baseLimit}&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n        }\n    }\n\n\n    return {clearError, \n            process,\n            setProcess, \n            getAllCharacters, \n            getCharacter, \n            getAllComics, \n            getComic, \n            getCharacterByName}\n}\n\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","Error","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","_baseLimit","results","map","res","getAllComics","getCharacterByName","Skeleton","Spinner"],"sourceRoot":""}