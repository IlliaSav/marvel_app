{"version":3,"file":"static/js/682.4d811646.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/infoBanner/InfoBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ \n                display: 'block', \n                width: \"250px\", \n                height: \"250px\", \n                objectFit: 'contain', \n                margin: \"0 auto\"}} \n            src={img} \n            alt='Error'/>\n    )\n}\n\nexport default ErrorMessage;","import React from 'react';\nimport { Formik, Form} from 'formik';\nimport Spinner from '../spinner/Spinner';\nimport './popup.scss';\n\nconst InfoBanner = () => {\n    \n    // <Popup trigger={<button className=\"button\"> Info </button>} modal>\n    //     <span> Note that this is a test project and uses a third-party API (Marvel). Therefore, the speed of loading characters and comics depends only on the server, which unfortunately responds very slowly (~30 sec).\n    //     Thank you for being patient! </span>\n    // </Popup>\n    return (\n        // <div>Note that this is a test project and uses a third-party API (Marvel). Therefore, the speed of loading characters and comics depends only on the server, which unfortunately responds very slowly (~30 sec).\n        // Thank you for being patient!</div>\n        <div className='modal'>\n        <Formik>\n            <Form>\n                <label className='label' htmlFor=\"charName\">Note that this is a test project and uses a third-party API (Marvel). Therefore, the speed of loading characters and comics depends only on the server, which unfortunately responds very slowly (~30 sec).\n                Thank you for being patient!\n                </label>\n                <Spinner/>\n            </Form>\n        </Formik>\n    </div>\n    )\n}\n\nexport default InfoBanner;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport InfoBanner from '../infoBanner/InfoBanner';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <InfoBanner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n    \n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended)\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                    />\n                <title>Comics page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        \n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp(); \n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=bef7e7189c9364cb60378baf085f4e57';\n    const _baseOffset = 210;\n    const _baseLimit = 8;\n\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=${_baseLimit + 1}&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async(offset = 0, limit = _baseLimit) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${_baseLimit}&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n        }\n    }\n\n\n    return {clearError, \n            process,\n            setProcess, \n            getAllCharacters, \n            getCharacter, \n            getAllComics, \n            getComic, \n            getCharacterByName}\n}\n\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","InfoBanner","Formik","Form","htmlFor","Spinner","setContent","process","Component","newItemLoading","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","arr","items","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","_baseLimit","data","results","getCharacter","res","getComic","getCharacterByName"],"sourceRoot":""}